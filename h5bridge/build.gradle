apply from: rootProject.projectDir.absolutePath + "/config.gradle"
apply plugin: 'com.android.library'
apply from: rootProject.projectDir.absolutePath + "/maven_push.gradle"

RELEASE_MAVEN = releaseMaven
VERSION_NAME = releaseVersion

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    provided fileTree(includes: ['*.jar'], dir: 'providedLibs')
    compile 'com.android.support:support-v4:' + rootProject.ext.supportLibraryVersion
    compile 'com.android.support:support-annotations:' + rootProject.ext.supportLibraryVersion
    compile 'com.github.chrisbanes:PhotoView:2.0.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
}

apply from: rootProject.projectDir.absolutePath + "/bintray-release.gradle"

// load properties
Properties properties = new Properties()
File localPropertiesFile = project.file("$rootProject.projectDir.absolutePath/local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("gradle.properties");
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectName = properties.getProperty("project.name")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")

def bintray_Org = properties.getProperty("bintray.org")
def bintray_User = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")

publish {
    userOrg = bintray_Org
    groupId = projectGroupId
    artifactId = projectArtifactId
    uploadName = projectName
    website = projectSiteUrl
    repository = projectGitUrl
    publishVersion = projectVersionName
    bintrayUser = bintray_User
    bintrayKey = bintrayApikey
    dryRun = false
}
